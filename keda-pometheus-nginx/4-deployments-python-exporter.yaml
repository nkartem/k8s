apiVersion: v1
kind: Namespace
metadata:
  name: exporter-python
  labels:
    monitoring: exporter-python
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cm-exporter-python
  namespace: exporter-python
data:
  exporter.py: | 
    from pathlib import Path
    from prometheus_client import start_http_server, Summary
    import random
    import time

    folder_name = input("folder name:")
    folder = Path(folder_name)
    if folder.is_dir():
    folder_count = len([1 for file in folder.iterdir()])

    print(f"В папке {folder_name} есть {folder_count} объектов")

    # Create a metric to track time spent and requests made.
    REQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')

    # Decorate function with metric.
    @REQUEST_TIME.time()
    def process_request(t):
        """A dummy function that takes some time."""
        time.sleep(t)

    if __name__ == '__main__':
        # Start up the server to expose the metrics.
        start_http_server(30019)
        print ("Start http server ")
        # Generate some requests.
        while True:
            process_request(random.random())
  exporter-folder.py: |
    from prometheus_client import Counter, start_http_server
    import os
    import time

    # Create a Counter metric to track the number of files in the folder
    file_count_metric = Counter('folder_files_total', 'Total number of files in the folder')

    # Function to update the file count metric
    def update_file_count_metric():
        folder_path = '\config'
        file_count = len(os.listdir(folder_path))
        file_count_metric.inc(file_count)

    # Start the Prometheus HTTP server on the specified port
    start_http_server(8888)
    print("http server run")

    # Periodically update the file count metric
    while True:
        update_file_count_metric()
        time.sleep(60)  # Update the metric every 60 seconds
  print.py:  | 
    print("Hello World222222")
    exit()    
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-deployment-exporter
  namespace: exporter-python
  labels:
    app: exporter-python
spec:
  replicas: 3
  selector:
    matchLabels:
      app: exporter-python
  template:
    metadata:
      labels:
        app: exporter-python
    spec:
      containers:
      - name: python
        image: python:latest
        #command: ["pip", "install", "prometheus_client"]
        #command: [ "python", "/config/exporter.py"]
        command: ["/bin/sh", "-c"]
        args: ["pip install prometheus_client && python /config/print.py && python /config/exporter-folder.py"]
        ports:
        - containerPort: 8888
          name: http
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 200m
        tty: true
        stdin: true
        imagePullPolicy: Always
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: cm-exporter-python
            # An array of keys from the ConfigMap to create as files
            items: 
            - key: "exporter-folder.py"
              path: "exporter-folder.py"
            - key: "exporter.py"
              path: "exporter.py"
            - key: "print.py"
              path: "print.py"
---
apiVersion: v1
kind: Service
metadata:
  name: my-service-python
  namespace: exporter-python
spec:
  selector:
      app:  exporter-python # Selecting PODS with those Labels
  type:  NodePort # LoadBalancer | ClusterIP | NodePort
  ports:
    - name: exporter-python
      protocol: TCP
      port: 8888      # Port on Load Balancer
      targetPort: 8888  # Port on POD
      nodePort: 30019
